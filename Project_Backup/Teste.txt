#include "Fuses.h"

#define L_ON         0x0F
#define L_OFF        0x08
#define L_CLR        0x01
#define L_L1         0x80
#define L_L2         0xC0
#define L_CR         0x0F
#define L_NCR        0x0C
#define L_CFG        0x38
#bit  DISPLAY_CONTROL  =    portb.7
#bit  LENA             =    porte.1
#bit  LDAT             =    porte.0
#byte LPORT            =    portd

// void LCD_Init(void);
void LCD_Data(unsigned char DataVal);
void LCD_Command(unsigned char val);
void LCD_String(char* str);
void Atraso_Milisegundos(unsigned int valor);
void LCD_Write(unsigned char val);
char GetLCD_Init(void);

	char LCD = OFF,ValueWriteLCD;
/*******************************************************************/
/* Nome da Função:  GetLCD_Init                                    */
/* Proposito:         Flag se Hardware foi inicializado            */
/* Entradas:         Nenhuma                                       */
/* Saídas:            Nenhuma                                      */
/*******************************************************************/
char GetLCD_Init(void)
{
   return (HWLCD_Init);
}


/*******************************************************************/
/* Nome da Função:  Atraso_Milisegundos                            */
/* Proposito:         Gera atraso em milisegundos.                 */
/* Entradas:         unsigned int valor - tempo desejado em ms     */
/* Saídas:            Nenhuma                                      */
/*******************************************************************/
void Atraso_Milisegundos(unsigned int valor)
{
unsigned int  i;
unsigned char j;

 for (i =0; i< valor; i++)
 {

  for (j =0 ; j < 200; j++)
   {
#asm
   NOP
   NOP
   NOP
   NOP
   NOP
#endasm;
   }
 }
}
/*******************************************************************/
/* Nome da Função:  LCD_Write                                      */
/* Proposito:         Realiza a leitura de um byte no I2C.         */
/* Entradas:         unsigned char val - valor a ser enviado para o*/
/*                              display.                           */
/* Saídas:            Nenhuma                                      */
/*******************************************************************/
void LCD_Write(unsigned char val)
{
  LPORT = val;
}
/*******************************************************************/
/* Nome da Função:  LCD_Command                                    */
/* Proposito:         Envia comando de controle do display.        */
/* Entradas:         unsigned char val - comando para o display.   */
/* Saídas:            Nenhuma                                      */
/*******************************************************************/
void LCD_Command(unsigned char val)
{
   LENA = 1;
   LCD_Write(val);
   LDAT=0;
   Atraso_Milisegundos(3);
   LENA=0;
   Atraso_Milisegundos(3);
   LENA=1;
}
/*******************************************************************/
/* Nome da Função:  LCD_Data                                       */
/* Proposito:         Envia dados para o display.                  */
/* Entradas:         unsigned char DataVal - dados a serem enviados*/
/*                                 para o display.                 */
/* Saídas:            Nenhuma                                      */
/*******************************************************************/
void LCD_Data(unsigned char DataVal)
{
   LENA=1;
   LCD_Write(DataVal);
   LDAT=1;
   Atraso_Milisegundos(3);
   LENA=0;
   Atraso_Milisegundos(3);
   LENA=1;
}
/*******************************************************************/
/* Nome da Função:  LCD_Init                                       */
/* Proposito:         Inicializa o display.                        */
/* Entradas:         Nenhuma                                       */
/* Saídas:            Nenhuma                                      */
/*******************************************************************/
void LCD_Init(void)
{
   LENA=0;                                         // porte.1 Escrita ou leitura LCD
   LDAT=0;                                         // porte.0
   Atraso_Milisegundos(20);                        // NOP de 20 ms
   LENA=1;                                         // porte.1 Escrita ou Leitura LCD
   LCD_Command(L_CFG);                             // Configura LCD
   Atraso_Milisegundos(5);                         // NOP de 1ms
   LCD_Command(L_CFG);                             // Configura
   Atraso_Milisegundos(1);                         // NOP de 1 ms
   LCD_Command(L_CFG);                             // Configura LCD
   LCD_Command(L_OFF);                             // Desliga
   LCD_Command(L_ON);                              // Liga
   LCD_Command(L_CLR);                             // Limpa
   LCD_Command(L_CFG);                             // Configura LCD
   LCD_Command(L_L1);                              // Linha 1
}
/*******************************************************************/
/* Nome da Função:  LCD_String                                     */
/* Proposito:         Envia string para o display.                 */
/* Entradas:         char* str - ponteiro para a string origem.    */
/* Saídas:            Nenhuma                                      */
/*******************************************************************/
void LCD_String(char* str)
{
 unsigned char i=0;

 while(str[i] != 0 )
 {
   LCD_Data(str[i]);
   i++;
 }
}
/*******************************************************************/
/* Nome da Função:  ProcessDisplay                                 */
/* Proposito:         Plotagem de dados para Display               */
/* Entradas:         										       */
/* Saídas:            Nenhuma                                      */
/*******************************************************************/
void ProcessDisplay(void)										// Precisa testa-la ainda
{	

	// if (GetLCD_Init() == FALSE)										
	// {
		// LCD_Init();
	// }
	switch (Read)
	{	
		case Write:
				LCD_Command(L_CLR);            //Aqui os dados que serão escritos LCD_String (o que quer escrever);
				LCD_Command(L_L1);
				ValueWriteLCD = "SALVANDO...";
				LCD_String(ValueWriteLCD);
				LCD_Command(L_L2);
				ValueWriteLCD = "INFORMAÇÕES";
				LCD_String(ValueWriteLCD);
				break;
		case Read:
				LCD_Command(L_CLR);            //Aqui os dados que serão escritos LCD_String (o que quer escrever);
				LCD_Command(L_L1);
				LCD = "CARREGANDO...";
				LCD_String(LCD);
				LCD_Command(L_L2);
				LCD = "DADOS ANTERIOR!";
				LCD_String(LCD);
				SetProcessFution(Control);
				break;
		case EEPROM:
				LCD_Command(L_CLR);            //Aqui os dados que serão escritos LCD_String (o que quer escrever);
				LCD_Command(L_L1);
				ValueWriteLCD = "OPERAÇÃO";
				LCD_String(ValueWriteLCD);
				LCD_Command(L_L2);
				LCD_String(GetSpeedyRotation());
				break;
		case SleepMode:
				// LCD_Command(L_CLR);            //Aqui os dados que serão escritos LCD_String (o que quer escrever);
				break;
		case Control:
				LCD_Command(L_CLR);            //Aqui os dados que serão escritos LCD_String (o que quer escrever);
				LCD_Command(L_L1);
				ValueWriteLCD = "VELOCIDADE";
				LCD_String(ValueWriteLCD);
				LCD_Command(L_L2);
				LCD_String(GetSpeedyRotation());
				break;
	}

}

void InicializaHardware(void)
{
   setup_adc(ADC_OFF);
   setup_adc_ports(NO_ANALOGS);               						 /* AD Converter         */
   setup_psp(PSP_DISABLED);                    						 /* Parallel slave port   */
   setup_spi(FALSE);                           						 /* SPI Disabled         */
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4);    						 /*4M/4 = 1M -> 1M/4 = 250000             */
																	 /* 1/250000 = 4us -> 255* 4us = 1.02ms      */
   set_timer0(5);
   setup_comparator(NC_NC_NC_NC);              						 /* Desliga comparadores internos         */
   setup_vref(FALSE);                           					 /* Tensão de referencia  para o comparador   */
   setup_timer_2(T2_DIV_BY_4,250,1);								 //bloco PWM trabalha no timer 2, precisa configurar ele PAGINA 212 DO LIVRO E XEROX
   setup_ccp2(ccp_pwm);                     						 //pagina 218 livro, usa os dois blocos
   ext_int_edge(H_to_L);                   						 // Configura interrupção para borda de subida
   
   PORTA = 0x00;                                					 // limpa PORTA
   PORTB = 0x00;                                					 // limpa PORTB
   PORTC = 0x00;                               						 // limpa PORTC
   PORTD = 0x00;                               						 // limpa PORTD
   PORTE = 0x00;                                					 // limpa PORTE
   
   set_tris_a(0b11111111);            
   set_tris_b(0b01111111);            
   set_tris_c(0b00000001);            
   set_tris_d(0b00000000);            
   set_tris_e(0b00000000);            
   
    enable_interrupts(int_timer0);									 // Habilita interrupção do Timer0
   // enable_interrupts (int_ext);										 // Habilita interrupção externa
   enable_interrupts(global);										 // Habilita interrupção Global
   HwInitState = TRUE;												 // Sinaliza que o Hardware fui inicializado
}
